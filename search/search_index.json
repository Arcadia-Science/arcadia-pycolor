{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p><code>arcadia-pycolor</code> is a Python package for styling Matplotlib, Seaborn, and Plotly figures according to Arcadia's style guidelines. The documentation provides quickstart guides and code examples to help you get started.</p>"},{"location":"#quickstart-guide","title":"Quickstart guide","text":"<p>If you are new to using the package, we recommend starting with the quickstart guide for Matplotlib or Plotly. Each provides a quick introduction to <code>arcadia_pycolor</code> and how to use it to style plots so that they comply with the Arcadia style guide.</p>"},{"location":"#detailed-documentation","title":"Detailed documentation","text":"<ul> <li> <p>color_usage.ipynb: This notebook explains how to use the built-in color palettes and gradients and how to modify them to create your own custom color palettes and gradients.</p> </li> <li> <p>style_usage.ipynb: This notebook explains in more detail how the package sets the default styles for Matplotlib and how to use the <code>style_plot</code> function to apply the Arcadia style guide to individual plots. It also explains additional features of the <code>apc.mpl</code> module, like pre-defined figure sizes and a way to save figures with the correct resolution.</p> </li> <li> <p>color_vision_deficiency_tools.ipynb: This notebook explains how to use the color vision deficiency tools in the package to simulate color vision deficiencies in your plots. These tools are for testing the accessibility of your plots to people with color vision deficiencies. They are primarly intended for expert users and graphic designers.</p> </li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>The examples directory contains examples of some common plot types that demonstrate how to use the package to style Matplotlib, Seaborn, and Plotly plots.</p> <p>For links to the Arcadia style guide, please refer to the \"brand assets\" page on Notion.</p>"},{"location":"color_usage/","title":"Color usage","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nimport arcadia_pycolor as apc\n</pre> import matplotlib.pyplot as plt import numpy as np import seaborn as sns  import arcadia_pycolor as apc In\u00a0[2]: Copied! <pre>apc.aegean\n</pre> apc.aegean Out[2]: <pre>   aegean #5088C5</pre> <p>You can also use the IPython function <code>display</code> to show the colors in a cell's output, even if the cell ends with other code.</p> In\u00a0[3]: Copied! <pre>display(apc.amber)\n\n# Some other code.\nx = 1\ny = 2\nprint(x + y)\n</pre> display(apc.amber)  # Some other code. x = 1 y = 2 print(x + y) <pre>   amber #F28360</pre> <pre>3\n</pre> In\u00a0[4]: Copied! <pre># Displaying a Palette.\napc.palettes.primary\n</pre> # Displaying a Palette. apc.palettes.primary Out[4]: <pre>                        \n   aegean    #5088C5\n   amber     #F28360\n   seaweed   #3B9886\n   canary    #F7B846\n   aster     #7A77AB\n   rose      #F898AE\n   vital     #73B5E3\n   tangerine #FFB984\n   lime      #97CD78\n   dragon    #C85152\n   oat       #F5E4BE\n   wish      #BABEE0</pre> In\u00a0[5]: Copied! <pre># Displaying a Gradient.\napc.gradients.viridis\n</pre> # Displaying a Gradient. apc.gradients.viridis Out[5]: <pre>                     \n   space  #282A49 0\n   aegean #5088C5 0.468\n   lime   #97CD78 0.746\n   butter #FFFDBD 1</pre> In\u00a0[6]: Copied! <pre># Using Arcadia colors in a matplotlib plot.\nplt.bar(\n    x=[\"A\", \"B\", \"C\", \"D\"],\n    height=[1, 2, 3, 4],\n    color=[apc.aegean, apc.amber, apc.seaweed, apc.canary],\n)\nplt.ylabel(\"Y axis\")\nplt.xlabel(\"X axis\")\nplt.show()\n</pre> # Using Arcadia colors in a matplotlib plot. plt.bar(     x=[\"A\", \"B\", \"C\", \"D\"],     height=[1, 2, 3, 4],     color=[apc.aegean, apc.amber, apc.seaweed, apc.canary], ) plt.ylabel(\"Y axis\") plt.xlabel(\"X axis\") plt.show() In\u00a0[7]: Copied! <pre># Getting colors from a palette for a plot.\nplt.bar(\n    x=[\"A\", \"B\", \"C\", \"D\"],\n    height=[1, 2, 3, 4],\n    color=apc.palettes.blue_shades[0:4],\n)\nplt.ylabel(\"Y axis\")\nplt.xlabel(\"X axis\")\nplt.show()\n</pre> # Getting colors from a palette for a plot. plt.bar(     x=[\"A\", \"B\", \"C\", \"D\"],     height=[1, 2, 3, 4],     color=apc.palettes.blue_shades[0:4], ) plt.ylabel(\"Y axis\") plt.xlabel(\"X axis\") plt.show() In\u00a0[8]: Copied! <pre># Using a gradient with `seaborn`.\ndata = np.random.rand(8, 8)\nsns.heatmap(data, cmap=apc.gradients.sunset.to_mpl_cmap(), square=True)\nplt.ylabel(\"Y axis\")\nplt.xlabel(\"X axis\")\nplt.show()\n</pre> # Using a gradient with `seaborn`. data = np.random.rand(8, 8) sns.heatmap(data, cmap=apc.gradients.sunset.to_mpl_cmap(), square=True) plt.ylabel(\"Y axis\") plt.xlabel(\"X axis\") plt.show() In\u00a0[9]: Copied! <pre># Creating a Palette from a list of colors.\nmy_palette = apc.Palette(\"my_palette\", [apc.aegean, apc.amber, apc.seaweed, apc.canary])\n\nmy_palette\n</pre> # Creating a Palette from a list of colors. my_palette = apc.Palette(\"my_palette\", [apc.aegean, apc.amber, apc.seaweed, apc.canary])  my_palette Out[9]: <pre>        \n   aegean  #5088C5\n   amber   #F28360\n   seaweed #3B9886\n   canary  #F7B846</pre> In\u00a0[10]: Copied! <pre># Creating a Palette from a dictionary.\nmy_palette = apc.Palette.from_dict(\n    \"my_palette\",\n    {\n        \"red\": \"#FF0000\",\n        \"green\": \"#00FF00\",\n        \"blue\": \"#0000FF\",\n    },\n)\n\nmy_palette\n</pre> # Creating a Palette from a dictionary. my_palette = apc.Palette.from_dict(     \"my_palette\",     {         \"red\": \"#FF0000\",         \"green\": \"#00FF00\",         \"blue\": \"#0000FF\",     }, )  my_palette Out[10]: <pre>      \n   red   #FF0000\n   green #00FF00\n   blue  #0000FF</pre> <p>Similarly, you can create custom gradients by passing a list of colors to the <code>Gradient</code> constructor, or using the <code>Gradient.from_dict</code> method. For <code>Gradient</code>s, you may also specify the position of each color in the gradient. If you do not specify this value, the colors will be evenly spaced.</p> <p>Note: Values for the color position must be between 0 and 1, and must be in increasing order.</p> In\u00a0[11]: Copied! <pre># Creating a Gradient from a list of colors.\nmy_gradient = apc.Gradient(\"my_gradient\", [apc.vital, apc.oat, apc.amber])\n\nmy_gradient\n</pre> # Creating a Gradient from a list of colors. my_gradient = apc.Gradient(\"my_gradient\", [apc.vital, apc.oat, apc.amber])  my_gradient Out[11]: <pre>                     \n   vital #73B5E3 0.0\n   oat   #F5E4BE 0.5\n   amber #F28360 1.0</pre> In\u00a0[12]: Copied! <pre># Creating a Gradient from a list of colors while specifying values.\nmy_gradient = apc.Gradient(\n    \"my_gradient\",\n    [apc.concord, apc.vital, apc.oat, apc.amber, apc.cinnabar],\n    [0, 0.35, 0.5, 0.65, 1],\n)\n\nmy_gradient\n</pre> # Creating a Gradient from a list of colors while specifying values. my_gradient = apc.Gradient(     \"my_gradient\",     [apc.concord, apc.vital, apc.oat, apc.amber, apc.cinnabar],     [0, 0.35, 0.5, 0.65, 1], )  my_gradient Out[12]: <pre>                     \n   concord  #341E60 0\n   vital    #73B5E3 0.35\n   oat      #F5E4BE 0.5\n   amber    #F28360 0.65\n   cinnabar #9E3F41 1</pre> In\u00a0[13]: Copied! <pre># Creating a Gradient from a dictionary of colors.\nmy_gradient = apc.Gradient.from_dict(\n    \"my_gradient\",\n    {\n        \"red\": \"#FF0000\",\n        \"gray\": \"#DDDDDD\",\n        \"blue\": \"#0000FF\",\n    },\n)\n\nmy_gradient\n</pre> # Creating a Gradient from a dictionary of colors. my_gradient = apc.Gradient.from_dict(     \"my_gradient\",     {         \"red\": \"#FF0000\",         \"gray\": \"#DDDDDD\",         \"blue\": \"#0000FF\",     }, )  my_gradient Out[13]: <pre>                     \n   red  #FF0000 0.0\n   gray #DDDDDD 0.5\n   blue #0000FF 1.0</pre> In\u00a0[14]: Copied! <pre># Reverse the order of a Palette.\ndisplay(apc.palettes.primary)\ndisplay(apc.palettes.primary.reverse())\n</pre> # Reverse the order of a Palette. display(apc.palettes.primary) display(apc.palettes.primary.reverse()) <pre>                        \n   aegean    #5088C5\n   amber     #F28360\n   seaweed   #3B9886\n   canary    #F7B846\n   aster     #7A77AB\n   rose      #F898AE\n   vital     #73B5E3\n   tangerine #FFB984\n   lime      #97CD78\n   dragon    #C85152\n   oat       #F5E4BE\n   wish      #BABEE0</pre> <pre>                        \n   wish      #BABEE0\n   oat       #F5E4BE\n   dragon    #C85152\n   lime      #97CD78\n   tangerine #FFB984\n   vital     #73B5E3\n   rose      #F898AE\n   aster     #7A77AB\n   canary    #F7B846\n   seaweed   #3B9886\n   amber     #F28360\n   aegean    #5088C5</pre> In\u00a0[15]: Copied! <pre># Palettes have length.\nlen(apc.palettes.primary)\n</pre> # Palettes have length. len(apc.palettes.primary) Out[15]: <pre>12</pre> In\u00a0[16]: Copied! <pre># Palettes can be indexed and spliced.\ndisplay(apc.palettes.primary[0])\ndisplay(apc.palettes.primary[:3])\ndisplay(apc.palettes.primary[::2])\n</pre> # Palettes can be indexed and spliced. display(apc.palettes.primary[0]) display(apc.palettes.primary[:3]) display(apc.palettes.primary[::2]) <pre>   aegean #5088C5</pre> <pre>      \n   aegean  #5088C5\n   amber   #F28360\n   seaweed #3B9886</pre> <pre>            \n   aegean  #5088C5\n   seaweed #3B9886\n   aster   #7A77AB\n   vital   #73B5E3\n   lime    #97CD78\n   oat     #F5E4BE</pre> In\u00a0[17]: Copied! <pre># Palettes can be iterated through.\nfor color in apc.palettes.primary[:3]:\n    display(color)\n</pre> # Palettes can be iterated through. for color in apc.palettes.primary[:3]:     display(color) <pre>   aegean #5088C5</pre> <pre>   amber #F28360</pre> <pre>   seaweed #3B9886</pre> In\u00a0[18]: Copied! <pre># \"Adding two palettes together concatenates\n# their colors and returns a single new palette\n# (just like adding two lists concatenates\n# them and returns a new list).\"\napc.palettes.primary + apc.palettes.secondary\n</pre> # \"Adding two palettes together concatenates # their colors and returns a single new palette # (just like adding two lists concatenates # them and returns a new list).\" apc.palettes.primary + apc.palettes.secondary Out[18]: <pre>                                        \n   aegean    #5088C5\n   amber     #F28360\n   seaweed   #3B9886\n   canary    #F7B846\n   aster     #7A77AB\n   rose      #F898AE\n   vital     #73B5E3\n   tangerine #FFB984\n   lime      #97CD78\n   dragon    #C85152\n   oat       #F5E4BE\n   wish      #BABEE0\n   sky       #C6E7F4\n   dress     #F8C5C1\n   taupe     #DBD1C3\n   denim     #B6C8D4\n   sage      #B5BEA4\n   marine    #8A99AD\n   mars      #DA9085\n   shell     #EDE0D6</pre> In\u00a0[19]: Copied! <pre># Convert a Palette into a `matplotlib.colors.ListedColormap`.\nevaluation_palette = apc.Palette(\n    \"evaluation_palette\",\n    [apc.amber, apc.canary, apc.vital, apc.aegean],\n)\n\ndisplay(evaluation_palette.to_mpl_cmap())\n\n# You might use this in situations where you want to translate a\n# continuous variable into a categorical variable, such as when\n# showing quartiles in a heatmap.\ndata = np.random.rand(8, 8)\nsns.heatmap(data, cmap=evaluation_palette.to_mpl_cmap(), vmin=0, vmax=1, square=True)\nplt.ylabel(\"Y axis\")\nplt.xlabel(\"X axis\")\nplt.show()\n</pre> # Convert a Palette into a `matplotlib.colors.ListedColormap`. evaluation_palette = apc.Palette(     \"evaluation_palette\",     [apc.amber, apc.canary, apc.vital, apc.aegean], )  display(evaluation_palette.to_mpl_cmap())  # You might use this in situations where you want to translate a # continuous variable into a categorical variable, such as when # showing quartiles in a heatmap. data = np.random.rand(8, 8) sns.heatmap(data, cmap=evaluation_palette.to_mpl_cmap(), vmin=0, vmax=1, square=True) plt.ylabel(\"Y axis\") plt.xlabel(\"X axis\") plt.show() evaluation_palette  underbad over  In\u00a0[20]: Copied! <pre># Reverse the direction of a gradient\ndisplay(apc.gradients.viridis)\ndisplay(apc.gradients.viridis.reverse())\n</pre> # Reverse the direction of a gradient display(apc.gradients.viridis) display(apc.gradients.viridis.reverse()) <pre>                     \n   space  #282A49 0\n   aegean #5088C5 0.468\n   lime   #97CD78 0.746\n   butter #FFFDBD 1</pre> <pre>                     \n   butter #FFFDBD 0\n   lime   #97CD78 0.254\n   aegean #5088C5 0.532\n   space  #282A49 1</pre> In\u00a0[21]: Copied! <pre># Add gradients together.\napc.gradients.reds + apc.gradients.blues.reverse()\n</pre> # Add gradients together. apc.gradients.reds + apc.gradients.blues.reverse() Out[21]: <pre>                     \n   cinnabar #9E3F41 0.0\n   dragon   #C85152 0.106\n   blush    #FFF3F4 0.5\n   zephyr   #F4FBFF 0.5\n   aegean   #5088C5 0.873\n   lapis    #2B65A1 1.0</pre> In\u00a0[22]: Copied! <pre># Convert a Palette into a `matplotlib.colors.LinearSegmentedColormap`.\napc.gradients.magma.to_mpl_cmap()\n</pre> # Convert a Palette into a `matplotlib.colors.LinearSegmentedColormap`. apc.gradients.magma.to_mpl_cmap() Out[22]: magma  underbad over  In\u00a0[23]: Copied! <pre># Gradients represent a continuum of colors, so they have no length.\ntry:\n    len(apc.gradients.magma)  # type: ignore\nexcept TypeError as e:\n    print(e)\n\n# But you can sample a gradient to create a Palette with a specified\n# number of colors.\nmagma_palette = apc.gradients.magma.resample_as_palette(7)\ndisplay(magma_palette)\ndisplay(len(magma_palette))\n</pre> # Gradients represent a continuum of colors, so they have no length. try:     len(apc.gradients.magma)  # type: ignore except TypeError as e:     print(e)  # But you can sample a gradient to create a Palette with a specified # number of colors. magma_palette = apc.gradients.magma.resample_as_palette(7) display(magma_palette) display(len(magma_palette)) <pre>object of type 'Gradient' has no len()\n</pre> <pre>              \n   magma_0 #341e60\n   magma_1 #4c3b81\n   magma_2 #77528b\n   magma_3 #aa6889\n   magma_4 #cd8985\n   magma_5 #ebaf8b\n   magma_6 #f5dfb2</pre> <pre>7</pre> In\u00a0[24]: Copied! <pre>apc.plot.plot_gradient_lightness(apc.gradients.viridis)\n</pre> apc.plot.plot_gradient_lightness(apc.gradients.viridis) <p>When building custom gradients, you can use the <code>.interpolate_lightness()</code> method of any <code>Gradient</code> object to ensure that the gradient transitions smoothly from light to dark.</p> In\u00a0[25]: Copied! <pre># The colors in this custom gradient aren't smoothly increasing in lightness.\nmy_blues = apc.Gradient(\n    \"my_blues\",\n    [apc.concord, apc.vital, apc.sky, apc.zephyr],\n)\n\n# This method adjusts the positions of colors so that lightness is smoothly increasing.\nmy_blues_interpolated = my_blues.interpolate_lightness()\n\n# You can see the difference in lightness by plotting the gradients.\napc.plot.plot_gradient_lightness([my_blues, my_blues_interpolated], figsize=(8, 5))\n\ndisplay(my_blues)\ndisplay(my_blues_interpolated)\n</pre> # The colors in this custom gradient aren't smoothly increasing in lightness. my_blues = apc.Gradient(     \"my_blues\",     [apc.concord, apc.vital, apc.sky, apc.zephyr], )  # This method adjusts the positions of colors so that lightness is smoothly increasing. my_blues_interpolated = my_blues.interpolate_lightness()  # You can see the difference in lightness by plotting the gradients. apc.plot.plot_gradient_lightness([my_blues, my_blues_interpolated], figsize=(8, 5))  display(my_blues) display(my_blues_interpolated) <pre>                     \n   concord #341E60 0.0\n   vital   #73B5E3 0.3333333333333333\n   sky     #C6E7F4 0.6666666666666666\n   zephyr  #F4FBFF 1.0</pre> <pre>                     \n   concord #341E60 0.0\n   vital   #73B5E3 0.67\n   sky     #C6E7F4 0.901\n   zephyr  #F4FBFF 1.0</pre> In\u00a0[26]: Copied! <pre># Display all colors.\napc.palettes.all_colors\n</pre> # Display all colors. apc.palettes.all_colors Out[26]: <pre>                                                                                                                                                                      \n   aegean     #5088C5\n   amber      #F28360\n   seaweed    #3B9886\n   canary     #F7B846\n   aster      #7A77AB\n   rose       #F898AE\n   vital      #73B5E3\n   tangerine  #FFB984\n   lime       #97CD78\n   dragon     #C85152\n   oat        #F5E4BE\n   wish       #BABEE0\n   sky        #C6E7F4\n   dress      #F8C5C1\n   taupe      #DBD1C3\n   denim      #B6C8D4\n   sage       #B5BEA4\n   marine     #8A99AD\n   mars       #DA9085\n   shell      #EDE0D6\n   gray       #EBEDE8\n   chateau    #BAB0A8\n   bark       #8F8885\n   slate      #43413F\n   charcoal   #484B50\n   crow       #292928\n   forest     #596F74\n   pitch      #09090A\n   parchment  #FDF8F2\n   zephyr     #F4FBFF\n   lichen     #F7FBEF\n   dawn       #F8F4F1\n   concord    #341E60\n   brightgray #EAEAEA\n   paper      #FCFCFC\n   redwood    #52180A\n   depths     #09473E\n   soil       #4D2500\n   umber      #A85E28\n   parchment  #FDF8F2\n   heather    #A96789\n   tumbleweed #E9A482\n   wheat      #F5DFB2\n   shire      #4E7F72\n   topaz      #FFCC7B\n   space      #282A49\n   butter     #FFFDBD\n   terracotta #964222\n   blush      #FFF3F4\n   lilac      #6862AB\n   ghost      #FCF7FF\n   white      #FFFFFF\n   red        #FF0000\n   green      #00FF00\n   blue       #0000FF\n   cyan       #00FFFF\n   magenta    #FF00FF\n   yellow     #FFFF00\n   black      #000000\n   dusk       #094468\n   lapis      #2B65A1\n   cinnabar   #9E3F41\n   melon      #FFD0B0\n   mustard    #D68D22\n   sun        #FFD364\n   tanzanite  #54448C\n   iris       #DCDFEF\n   asparagus  #2A6B5E\n   teal       #6FBCAD\n   glass      #C3E2DB\n   azalea     #C14C70\n   candy      #E2718F\n   putty      #FFE3D4\n   mud        #635C5A\n   stone      #EDE6DA\n   steel      #687787\n   cloud      #ABBAC4\n   dove       #CAD4DB\n   ice        #E6EAED\n   yucca      #1E4812\n   fern       #47784A\n   matcha     #71AC5A\n   edamame    #C1E1AE</pre> In\u00a0[27]: Copied! <pre># Display all palettes.\napc.plot.display_all_palettes()\n</pre> # Display all palettes. apc.plot.display_all_palettes() <pre>Primary\n                        \nSecondary\n                \nNeutral\n                \nBackground\n        \nPrimaryOrdered\n                        \nSecondaryOrdered\n                \nAllOrdered\n                                        \nBlueShades\n          \nRedShades\n          \nYellowShades\n          \nPurpleShades\n          \nTealShades\n          \nPinkShades\n          \nWarmGrayShades\n          \nCoolGrayShades\n          \nGreenShades\n          \nOther\n                                      \nNamed\n                \nAllColors\n                                                                                                                                                                      \nBlueShades+RedShades+YellowShades+PurpleShades+TealShades+PinkShades+WarmGrayShades+CoolGrayShades+GreenShades\n                                                                                          \n</pre> In\u00a0[28]: Copied! <pre># Display all gradients.\napc.plot.display_all_gradients()\n</pre> # Display all gradients. apc.plot.display_all_gradients() <pre>magma\n                     \nviridis\n                     \nverde\n                     \nsunset\n                     \nwine\n                     \nlisafrank\n                     \nreds\n                     \noranges\n                     \ngreens\n                     \nsages\n                     \nblues\n                     \npurples\n                     \norange_sage\n                     \nred_blue\n                     \npurple_green\n                     \n</pre>"},{"location":"color_usage/#tools-for-working-with-arcadias-colors","title":"Tools for working with Arcadia's colors\u00b6","text":"<p>Arcadia has a set of brand colors which are used in the website, presentations, and other materials. Consistent use of these colors can help scientists make their data visually appealing, and is important for maintaining a consistent brand identity. <code>arcadia-pycolor</code> provides access to these colors for use when making plots and figures in Python.</p>"},{"location":"color_usage/#getting-started","title":"Getting Started\u00b6","text":"<p>After installing <code>arcadia-pycolor</code> using <code>pip install arcadia-pycolor</code>, you can import the <code>arcadia_pycolor</code> module.</p>"},{"location":"color_usage/#accessing-and-displaying-colors","title":"Accessing and displaying colors\u00b6","text":"<p><code>arcadia-pycolor</code> stores the brand colors as objects based on their color name. When working with Jupyter notebooks, you can display the colors as part of a cell's output. This displays a swatch of the color, along with the color's name and hex code.</p>"},{"location":"color_usage/#palettes-and-gradients","title":"Palettes and gradients\u00b6","text":"<p><code>arcadia-pycolor</code> provides two classes for working with multiple colors: <code>Palette</code> and <code>Gradient</code>. <code>Palette</code> is a collection of discrete colors, while <code>Gradient</code> is a collection of colors that transition smoothly from one to the next. The package contains a variety of built-in palettes and gradients, which can be accessed under the <code>palettes</code> and <code>gradients</code> namespaces. These can also be displayed in the same way as individual colors.</p>"},{"location":"color_usage/#using-colors-in-plots","title":"Using colors in plots\u00b6","text":"<p>Colors can be used in plots by passing them as arguments to plotting functions. For example, in <code>matplotlib</code>, you can pass a color object or a list of color objects as the <code>color</code> argument to <code>plot</code>, <code>scatter</code>, or other plotting functions.</p>"},{"location":"color_usage/#creating-custom-palettes-and-gradients","title":"Creating custom palettes and gradients\u00b6","text":"<p>You can create custom palettes by passing a list of colors to the <code>Palette</code> constructor, or using the <code>Palette.from_dict</code> method.</p>"},{"location":"color_usage/#palette-utilities","title":"Palette utilities\u00b6","text":"<p><code>Palette</code> objects have several utility methods for working with colors.</p>"},{"location":"color_usage/#gradient-utilities","title":"Gradient utilities\u00b6","text":"<p><code>Gradient</code> objects have a variety of utilities for working with gradients.</p>"},{"location":"color_usage/#checking-gradient-lightness","title":"Checking gradient lightness\u00b6","text":"<p>For most applications, gradients should transition smoothly from light to dark (or vice versa), without major inflection points in intensity. You can check the lightness of a gradient using the <code>apc.plot.plot_gradient_lightness</code> function.</p>"},{"location":"color_usage/#displaying-all-available-colors-gradients-and-palettes","title":"Displaying all available colors, gradients, and palettes\u00b6","text":""},{"location":"color_vision_deficiency_tools/","title":"Color vision deficiency tools","text":"In\u00a0[1]: Copied! <pre>import arcadia_pycolor as apc\n</pre> import arcadia_pycolor as apc In\u00a0[2]: Copied! <pre># Display one specific color vision deficiency for one color.\napc.cvd.simulate_color(apc.aegean, \"t\")\n</pre> # Display one specific color vision deficiency for one color. apc.cvd.simulate_color(apc.aegean, \"t\") Out[2]: <pre>   aegean_t #00969e</pre> In\u00a0[3]: Copied! <pre># Display all three types of color vision deficiency for one color.\napc.cvd.display_all_color(apc.aegean)\n</pre> # Display all three types of color vision deficiency for one color. apc.cvd.display_all_color(apc.aegean) <pre>   aegean #5088C5\n   aegean_d #5e80c4\n   aegean_p #6e8bc8\n   aegean_t #00969e\n</pre> In\u00a0[4]: Copied! <pre># Display one specific color vision deficiency for all colors in a palette.\napc.cvd.simulate_palette(apc.palettes.primary, \"t\")\n</pre> # Display one specific color vision deficiency for all colors in a palette. apc.cvd.simulate_palette(apc.palettes.primary, \"t\") Out[4]: <pre>                        \n   aegean_t    #00969e\n   amber_t     #ff6e7b\n   seaweed_t   #009a93\n   canary_t    #ffa6a1\n   aster_t     #6e808a\n   rose_t      #ff90a0\n   vital_t     #2ec0c4\n   tangerine_t #ffabac\n   lime_t      #97c7b9\n   dragon_t    #da3753\n   oat_t       #feddda\n   wish_t      #b2c4c9</pre> In\u00a0[5]: Copied! <pre># Display all three types of color vision deficiency for all colors in a palette.\napc.cvd.display_all_palette(apc.palettes.primary)\n</pre> # Display all three types of color vision deficiency for all colors in a palette. apc.cvd.display_all_palette(apc.palettes.primary) <pre>Primary\n                        \nPrimary_d\n                        \nPrimary_p\n                        \nPrimary_t\n                        \n</pre> In\u00a0[6]: Copied! <pre># Display one specific color vision deficiency for a gradient.\napc.cvd.simulate_gradient(apc.gradients.viridis, \"t\")\n</pre> # Display one specific color vision deficiency for a gradient. apc.cvd.simulate_gradient(apc.gradients.viridis, \"t\") Out[6]: <pre>                     \n   space_t  #1c3136 0\n   aegean_t #00969e 0.468\n   lime_t   #97c7b9 0.746\n   butter_t #fff5ec 1</pre> In\u00a0[7]: Copied! <pre># Display all three types of color vision deficiency for a gradient.\napc.cvd.display_all_gradient(apc.gradients.viridis)\n</pre> # Display all three types of color vision deficiency for a gradient. apc.cvd.display_all_gradient(apc.gradients.viridis) <pre>viridis\n                     \nviridis_d\n                     \nviridis_p\n                     \nviridis_t\n                     \n</pre> In\u00a0[8]: Copied! <pre># Display gradient lightness for all three types of color vision deficiency.\napc.mpl.setup()\napc.cvd.display_all_gradient_lightness(apc.gradients.viridis, figsize=(10, 3.5))\n</pre> # Display gradient lightness for all three types of color vision deficiency. apc.mpl.setup() apc.cvd.display_all_gradient_lightness(apc.gradients.viridis, figsize=(10, 3.5))"},{"location":"color_vision_deficiency_tools/#tools-for-working-simulating-color-vision-deficiency","title":"Tools for working simulating color vision deficiency\u00b6","text":"<p>When working with color, it is important to consider how people with color vision deficiencies will perceive your images. <code>arcadia_pycolor</code> implements tools to simulate color vision deficiencies in Arcadia's colors.</p>"},{"location":"color_vision_deficiency_tools/#color-vision-deficiencies","title":"Color vision deficiencies\u00b6","text":"<p>There are three main types of color vision deficiencies:</p> <ul> <li>Protanopia: insensitivity to red light</li> <li>Deuteranopia: insensitivity to green light</li> <li>Tritanopia: insensitivity to blue light</li> </ul> <p><code>arcadia_pycolor</code> implements tools to simulate these deficiencies in Arcadia's colors.</p>"},{"location":"mpl_quickstart/","title":"Quickstart guide for Matplotlib","text":"<p>This notebook provides a quick introduction to the <code>arcadia_pycolor</code> Python package and how to use it to style Matplotlib and seaborn plots so that they comply with the Arcadia style guide.</p>"},{"location":"mpl_quickstart/#install-the-arcadia_pycolor-package","title":"Install the <code>arcadia_pycolor</code> package","text":"<p>The <code>arcadia_pycolor</code> package can be installed using pip. In a virtual environment of your choice, run the following command in your terminal:</p> <pre><code>pip install arcadia-pycolor\n</code></pre> <p>The package can then be imported in notebooks or scripts using the following command:</p> <pre><code>import arcadia_pycolor as apc\n</code></pre>"},{"location":"mpl_quickstart/#set-the-default-matplotlib-styles","title":"Set the default Matplotlib styles","text":"<p>The package provides a function called <code>apc.mpl.setup</code> that sets the default Matplotlib styles to match the Arcadia style guide. This function only needs to be called once, ideally at the beginning of the notebook or script. The styles it sets will automatically apply to all plots in the notebook or script.</p> <pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\nimport arcadia_pycolor as apc\n\n# Call the `setup` function once, at the beginning of a notebook or script.\napc.mpl.setup()\n\n# Matplotlib plots will now use the Arcadia style guide.\nplt.plot([3, 1, 4, 1, 5])\nplt.show()\n\n# Seaborn plots will also use the Arcadia style guide.\nsns.histplot([3, 1, 4, 1, 5])\nplt.show()\n</code></pre>"},{"location":"mpl_quickstart/#what-does-apcmplsetup-do","title":"What does <code>apc.mpl.setup</code> do?","text":"<p>The <code>apc.mpl.setup</code> does several different things:</p> <ul> <li>It loads the Arcadia fonts.</li> <li>It registers Arcadia color palettes and gradients with Matplotlib (see the section \"Using Arcadia colors\" below).</li> <li>It sets the default Matplotlib styles to match the Arcadia style guide.</li> </ul> <p>To see before-and-after examples of what <code>apc.mpl.setup</code> does, please refer to the documentation about styling plots.</p>"},{"location":"mpl_quickstart/#a-note-about-the-arcadia-fonts","title":"A note about the Arcadia fonts","text":"<p>The Arcadia style guide uses the Suisse family of fonts. When <code>apc.mpl.setup</code> is called, it automatically configures Matplotlib to use these fonts. If they are not installed, Matplotlib will use its default fonts instead.</p> <p>The Suisse fonts are proprietary. To install them, please refer to the \"brand assets\" page on Notion for instructions. Please do not share these fonts outside of Arcadia.</p>"},{"location":"mpl_quickstart/#styling-individual-plots","title":"Styling individual plots","text":"<p>Some aspects of the style guide can only be applied to individual plots. The <code>apc.mpl.style_plot</code> function can be used to apply these styles to a single plot. This function takes a Matplotlib <code>Axes</code> object as input.</p> <pre><code>import matplotlib.pyplot as plt\nimport arcadia_pycolor as apc\n\napc.mpl.setup()\n\nplt.plot([3, 1, 4, 1, 5])\napc.mpl.style_plot()\nplt.show()\n</code></pre> <p>If an <code>Axes</code> object is not passed to <code>style_plot</code>, the function will style the current plot (internally, <code>style_plot</code> uses <code>plt.gca()</code> to get the \"current\" <code>Axes</code> object).</p> <p>By default, the <code>style_plot</code> function capitalizes the x- and y-axis labels and styles the legend, if one exists. In addition, it has a few optional arguments that can be used to customize the styling of the x- and y-axis tick labels:</p> <ul> <li><code>monospaced_axes</code> sets the tick labels of the x- and/or y-axis to a monospaced font.</li> <li><code>categorical_axes</code> adjusts the x- and/or y-axis styles to be more readable when the axis represents a categorical variable.</li> <li><code>colorbar_exists</code> tells the function to style the colorbar, if one exists.</li> </ul> <p>To see examples of what the <code>style_plot</code> function does, please see the documentation about styling plots.</p>"},{"location":"mpl_quickstart/#using-arcadia-colors","title":"Using Arcadia colors","text":"<p>The Arcadia style guide defines sets of colors called \"color palettes\" that should be used in all figures. The <code>arcadia_pycolor</code> package provides easy access to both individual colors and to pre-defined palettes and gradients.</p>"},{"location":"mpl_quickstart/#using-individual-colors","title":"Using individual colors","text":"<p>All of the individual named colors listed in the style guide are available as attributes of the main <code>apc</code> module. For example, to create two line plots using the colors \"aegean\" and \"rose\":</p> <pre><code>import matplotlib.pyplot as plt\nimport arcadia_pycolor as apc\n\nplt.plot([1, 2, 3], [4, 5, 6], color=apc.aegean)\nplt.plot([1, 2, 3], [8, 10, 12], color=apc.rose)\n</code></pre> <p>To visualize a particular color, simply type it in a Jupyter notebook cell:</p> <pre><code>apc.aegean\n</code></pre> <p>When the cell is evaluated, it will output the name and hex code of the color alongside a swatch showing what the color looks like:</p> <p></p>"},{"location":"mpl_quickstart/#using-color-palettes","title":"Using color palettes","text":"<p>Individual colors are organized into groups called \"palettes.\" The palettes themselves have names and are accessible as attributes of the <code>apc.palettes</code> module. For example, we can rewrite the previous example to use the first two colors in the \"primary\" palette:</p> <pre><code>plt.plot([1, 2, 3], [4, 5, 6], color=apc.palettes.primary[0])\nplt.plot([1, 2, 3], [4, 6, 8], color=apc.palettes.primary[1])\n</code></pre> <p>To see all of the colors in a palette, evaluate the palette object in a notebook cell:</p> <pre><code>apc.palettes.primary\n</code></pre> <p>This outputs a list of color swatches with the names and hex codes of the colors in the palette:</p> <p></p>"},{"location":"mpl_quickstart/#using-color-gradients","title":"Using color gradients","text":"<p>The Arcadia style guide also defines continuous color gradients that can be used in plots like heatmaps. These gradients are accessible as attributes of the <code>apc.gradients</code> module. To use a gradient in a Matplotlib or seaborn plot, you can convert it to a Matplotlib colormap using the <code>to_mpl_cmap</code> method. For example, to use the \"blues\" gradient in a heatmap:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nimport arcadia_pycolor as apc\n\ndata = np.random.rand(10, 10)\nsns.heatmap(data, cmap=apc.gradients.blues.to_mpl_cmap())\n</code></pre> <p>Just like palettes, gradients can be visualized by evaluating a gradient object in a Jupyter notebook cell:</p> <pre><code>apc.gradients.blues\n</code></pre> <p>This outputs a gradient swatch showing the colors in the gradient:</p> <p></p>"},{"location":"mpl_quickstart/#referring-to-color-palettes-and-gradients-by-name","title":"Referring to color palettes and gradients by name","text":"<p>After <code>apc.mpl.setup</code> is called (see above), it registers all of the built-in color palettes and gradients with Matplotlib. This means that you can refer to them by name in any Matplotlib or seaborn plot. For example, to use the \"blues\" gradient in a heatmap without having to type <code>apc.gradients.blues</code> or convert it to a Matplotlib colormap, use the string <code>\"apc:blues\"</code> as the <code>cmap</code> argument:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nimport arcadia_pycolor as apc\n\ndata = np.random.rand(10, 10)\nsns.heatmap(data, cmap=\"apc:blues\")\n</code></pre> <p>For much more detail about how to use color palettes and gradients in your figures, please refer to the documentation about using colors.</p>"},{"location":"plotly_quickstart/","title":"Quickstart guide for Plotly","text":"<p>This notebook provides a quick introduction to the <code>arcadia_pycolor</code> Python package and how to use it to style Plotly plots so that they comply with the Arcadia style guide.</p>"},{"location":"plotly_quickstart/#install-the-arcadia_pycolor-package","title":"Install the <code>arcadia_pycolor</code> package","text":"<p>The <code>arcadia_pycolor</code> package can be installed using pip. In a virtual environment of your choice, run the following command in your terminal:</p> <pre><code>pip install arcadia-pycolor\n</code></pre> <p>The package can then be imported in notebooks or scripts using the following command:</p> <pre><code>import arcadia_pycolor as apc\n</code></pre>"},{"location":"plotly_quickstart/#set-the-default-plotly-styles","title":"Set the default Plotly styles","text":"<p>The package provides a function called <code>apc.plotly.setup</code> that sets the default Plotly styles to match the Arcadia style guide. This function only needs to be called once, ideally at the beginning of the notebook or script. The styles it sets will automatically apply to all plots in the notebook or script.</p> <pre><code>import plotly.express as px\nimport arcadia_pycolor as apc\n\n# Call the `setup` function once, at the beginning of a notebook or script.\napc.plotly.setup()\n\n# Plotly plots will now use the Arcadia style guide.\nfig = px.line(x=[0, 1, 2, 3, 4], y=[3, 1, 4, 1, 5])\nfig.show()\n</code></pre>"},{"location":"plotly_quickstart/#a-note-about-the-arcadia-fonts","title":"A note about the Arcadia fonts","text":"<p>The Arcadia style guide uses the Suisse family of fonts. When <code>apc.plotly.setup</code> is called, it automatically configures Plotly to use these fonts. If they are not installed, Plotly will use its default fonts instead.</p> <p>The Suisse fonts are proprietary. To install them, please refer to the \"brand assets\" page on Notion for instructions. Please do not share these fonts outside of Arcadia.</p>"},{"location":"plotly_quickstart/#styling-individual-plots","title":"Styling individual plots","text":"<p>Some aspects of the style guide can only be applied to individual plots. The <code>apc.plotly.style_plot</code> function can be used to apply these styles to a single plot. This function takes a Plotly <code>Figure</code> object as input.</p> <pre><code>import plotly.express as px\nimport arcadia_pycolor as apc\n\napc.plotly.setup()\n\nfig = px.line(x=[0, 1, 2, 3, 4], y=[3, 1, 4, 1, 5])\napc.plotly.style_plot(fig, monospaced_axes=\"all\")\nfig.show()\n</code></pre> <p>The <code>style_plot</code> function can be used to customize the styling of the x- and y-axis tick labels:</p> <ul> <li><code>monospaced_axes</code> sets the tick labels of the x- and/or y-axis to a monospaced font.</li> <li><code>categorical_axes</code> adjusts the x- and/or y-axis styles to be more readable when the axis represents a categorical variable.</li> <li><code>colorbar_exists</code> tells the function to style the colorbar, if one exists.</li> </ul>"},{"location":"plotly_quickstart/#using-arcadia-colors","title":"Using Arcadia colors","text":"<p>The Arcadia style guide defines sets of colors called \"color palettes\" that should be used in all figures. The <code>arcadia_pycolor</code> package provides easy access to both individual colors and to pre-defined palettes and gradients.</p>"},{"location":"plotly_quickstart/#using-individual-colors","title":"Using individual colors","text":"<p>All of the individual named colors listed in the style guide are available as attributes of the main <code>apc</code> module. For example, to create a line plot using the color \"rose\":</p> <pre><code>import plotly.express as px\nimport arcadia_pycolor as apc\n\napc.plotly.setup()\n\nfig = px.line(x=[0, 1, 2, 3, 4], y=[3, 1, 4, 1, 5])\nfig.update_traces(line_color=apc.rose)\napc.plotly.style_plot(fig, monospaced_axes=\"all\")\nfig.show()\n</code></pre> <p>To visualize a particular color, simply type it in a Jupyter notebook cell:</p> <pre><code>apc.aegean\n</code></pre> <p>When the cell is evaluated, it will output the name and hex code of the color alongside a swatch showing what the color looks like:</p> <p></p>"},{"location":"plotly_quickstart/#using-color-palettes","title":"Using color palettes","text":"<p>Individual colors are organized into groups called \"palettes.\" The palettes themselves have names and are accessible as attributes of the <code>apc.palettes</code> module. For example, we can rewrite the previous example to use the first color in the \"primary\" palette:</p> <pre><code>fig = px.line(x=[0, 1, 2, 3, 4], y=[3, 1, 4, 1, 5])\nfig.update_traces(line_color=apc.apc.palettes.primary[0])\n</code></pre> <p>To see all of the colors in a palette, evaluate the palette object in a notebook cell:</p> <pre><code>apc.palettes.primary\n</code></pre> <p>This outputs a list of color swatches with the names and hex codes of the colors in the palette:</p> <p></p>"},{"location":"plotly_quickstart/#using-color-gradients","title":"Using color gradients","text":"<p>The Arcadia style guide also defines continuous color gradients that can be used in plots like heatmaps. These gradients are accessible as attributes of the <code>apc.gradients</code> module.</p> <p>To use a gradient in a Plotly plot, you can convert it to a Plotly colorscale using the <code>to_plotly_colorscale</code> method. For example, to use the \"magma\" gradient in a heatmap, check out the heatmap examples.</p> <p>Just like palettes, gradients can be visualized by evaluating a gradient object in a Jupyter notebook cell:</p> <pre><code>apc.gradients.blues\n</code></pre> <p>This outputs a gradient swatch showing the colors in the gradient:</p> <p></p>"},{"location":"style_usage/","title":"Style usage","text":"In\u00a0[1]: Copied! <pre>import pathlib\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn import datasets\n\nimport arcadia_pycolor as apc\n</pre> import pathlib  import matplotlib as mpl import matplotlib.pyplot as plt import pandas as pd import seaborn as sns from sklearn import datasets  import arcadia_pycolor as apc In\u00a0[2]: Copied! <pre>iris = datasets.load_iris()\niris_data = pd.DataFrame(iris.data)  # type: ignore\niris_data.columns = [i.replace(\" (cm)\", \"\") for i in iris.feature_names]  # type: ignore\niris_data[\"species\"] = iris.target_names[iris.target]  # type: ignore\n\nx_data = \"sepal length\"\ny_data = \"sepal width\"\nc_data = \"species\"\n\nglue_dataset = sns.load_dataset(\"glue\").pivot(index=\"Model\", columns=\"Task\", values=\"Score\")\n</pre> iris = datasets.load_iris() iris_data = pd.DataFrame(iris.data)  # type: ignore iris_data.columns = [i.replace(\" (cm)\", \"\") for i in iris.feature_names]  # type: ignore iris_data[\"species\"] = iris.target_names[iris.target]  # type: ignore  x_data = \"sepal length\" y_data = \"sepal width\" c_data = \"species\"  glue_dataset = sns.load_dataset(\"glue\").pivot(index=\"Model\", columns=\"Task\", values=\"Score\") In\u00a0[3]: Copied! <pre>sns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data)\nplt.title(\"An example scatterplot\")\nplt.show()\n\nsns.violinplot(x=c_data, y=y_data, data=iris_data, hue=c_data)\nplt.title(\"An example violin plot\")\nplt.show()\n\nsns.heatmap(glue_dataset)\nplt.title(\"An example heatmap\")\nplt.show()\n</pre> sns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data) plt.title(\"An example scatterplot\") plt.show()  sns.violinplot(x=c_data, y=y_data, data=iris_data, hue=c_data) plt.title(\"An example violin plot\") plt.show()  sns.heatmap(glue_dataset) plt.title(\"An example heatmap\") plt.show() In\u00a0[4]: Copied! <pre>apc.mpl.setup()\n\ncolors = {\n    \"setosa\": apc.aegean,\n    \"versicolor\": apc.amber,\n    \"virginica\": apc.seaweed,\n}\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\")\nsns.scatterplot(\n    x=x_data,\n    y=y_data,\n    hue=c_data,\n    data=iris_data,\n    palette=colors,\n    ax=ax,\n)\nplt.title(\"An example scatterplot\")\nplt.show()\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\")\nsns.violinplot(\n    x=c_data,\n    y=y_data,\n    data=iris_data,\n    hue=c_data,\n    palette=colors,\n    ax=ax,\n)\nplt.title(\"An example violin plot\")\nplt.show()\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\")\nsns.heatmap(glue_dataset, ax=ax, cmap=apc.gradients.reds.to_mpl_cmap())\nplt.title(\"An example heatmap\")\nplt.show()\n</pre> apc.mpl.setup()  colors = {     \"setosa\": apc.aegean,     \"versicolor\": apc.amber,     \"virginica\": apc.seaweed, }  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\") sns.scatterplot(     x=x_data,     y=y_data,     hue=c_data,     data=iris_data,     palette=colors,     ax=ax, ) plt.title(\"An example scatterplot\") plt.show()  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\") sns.violinplot(     x=c_data,     y=y_data,     data=iris_data,     hue=c_data,     palette=colors,     ax=ax, ) plt.title(\"An example violin plot\") plt.show()  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\") sns.heatmap(glue_dataset, ax=ax, cmap=apc.gradients.reds.to_mpl_cmap()) plt.title(\"An example heatmap\") plt.show() In\u00a0[5]: Copied! <pre>registered_colors = {\n    \"setosa\": \"apc:sky\",\n    \"versicolor\": \"apc:vital\",\n    \"virginica\": \"apc:lapis\",\n}\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\")\nsns.scatterplot(\n    x=x_data,\n    y=y_data,\n    hue=c_data,\n    data=iris_data,\n    palette=registered_colors,\n    ax=ax,\n)\nplt.title(\"An example scatterplot\")\nplt.show()\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\")\nsns.heatmap(glue_dataset, ax=ax, cmap=\"apc:blues\")\nplt.title(\"An example heatmap\")\nplt.show()\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\")\nsns.heatmap(glue_dataset, ax=ax, cmap=\"apc:blues_r\")\nplt.title(\"An example heatmap with reversed gradient\")\nplt.show()\n</pre> registered_colors = {     \"setosa\": \"apc:sky\",     \"versicolor\": \"apc:vital\",     \"virginica\": \"apc:lapis\", }  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\") sns.scatterplot(     x=x_data,     y=y_data,     hue=c_data,     data=iris_data,     palette=registered_colors,     ax=ax, ) plt.title(\"An example scatterplot\") plt.show()  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\") sns.heatmap(glue_dataset, ax=ax, cmap=\"apc:blues\") plt.title(\"An example heatmap\") plt.show()  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\") sns.heatmap(glue_dataset, ax=ax, cmap=\"apc:blues_r\") plt.title(\"An example heatmap with reversed gradient\") plt.show() In\u00a0[6]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\")\nsns.scatterplot(\n    x=x_data,\n    y=y_data,\n    hue=\"species\",\n    data=iris_data,\n    palette=colors,\n    ax=ax,\n)\napc.mpl.style_plot(monospaced_axes=\"all\")\nplt.title(\"An example scatterplot\")\nplt.show()\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\")\nsns.violinplot(\n    x=c_data,\n    y=y_data,\n    data=iris_data,\n    hue=c_data,\n    palette=colors,\n    ax=ax,\n)\napc.mpl.style_plot(categorical_axes=\"x\", monospaced_axes=\"y\")\nplt.title(\"An example violinplot\")\nplt.show()\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\")\nsns.heatmap(glue_dataset, ax=ax, cmap=\"apc:reds\")\napc.mpl.style_plot(colorbar_exists=True)\napc.mpl.set_xaxis_categorical()\napc.mpl.set_yaxis_categorical()\nplt.title(\"An example heatmap\")\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\") sns.scatterplot(     x=x_data,     y=y_data,     hue=\"species\",     data=iris_data,     palette=colors,     ax=ax, ) apc.mpl.style_plot(monospaced_axes=\"all\") plt.title(\"An example scatterplot\") plt.show()  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_square\"), layout=\"constrained\") sns.violinplot(     x=c_data,     y=y_data,     data=iris_data,     hue=c_data,     palette=colors,     ax=ax, ) apc.mpl.style_plot(categorical_axes=\"x\", monospaced_axes=\"y\") plt.title(\"An example violinplot\") plt.show()  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\") sns.heatmap(glue_dataset, ax=ax, cmap=\"apc:reds\") apc.mpl.style_plot(colorbar_exists=True) apc.mpl.set_xaxis_categorical() apc.mpl.set_yaxis_categorical() plt.title(\"An example heatmap\") plt.show() In\u00a0[7]: Copied! <pre>for plot_size in (\"full_wide\", \"full_square\", \"float_wide\", \"float_square\", \"half_square\"):\n    fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(plot_size), layout=\"constrained\")\n    sns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data, ax=ax)\n    apc.mpl.style_plot(monospaced_axes=\"all\")\n    plt.title(f'\"{plot_size}\" figure size')\n    plt.show()\n</pre> for plot_size in (\"full_wide\", \"full_square\", \"float_wide\", \"float_square\", \"half_square\"):     fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(plot_size), layout=\"constrained\")     sns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data, ax=ax)     apc.mpl.style_plot(monospaced_axes=\"all\")     plt.title(f'\"{plot_size}\" figure size')     plt.show() In\u00a0[8]: Copied! <pre>with mpl.rc_context({\"figure.facecolor\": apc.parchment}):\n    sns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data)\n    apc.mpl.style_plot(monospaced_axes=\"all\")\n    plt.show()\n</pre> with mpl.rc_context({\"figure.facecolor\": apc.parchment}):     sns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data)     apc.mpl.style_plot(monospaced_axes=\"all\")     plt.show() In\u00a0[9]: Copied! <pre>output_dirpath = pathlib.Path(\"output\")\noutput_dirpath.mkdir(exist_ok=True)\n\nsns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data)\napc.mpl.style_plot(monospaced_axes=\"all\")\n\n# Save a figure with the resolution for websites.\napc.mpl.save_figure(\n    str(output_dirpath / \"example-figure-web.pdf\"), size=\"full_square\", context=\"web\"\n)\n\n# Save a figure with the resolution for print.\napc.mpl.save_figure(\n    str(output_dirpath / \"example-figure-print.pdf\"), size=\"full_square\", context=\"print\"\n)\n</pre> output_dirpath = pathlib.Path(\"output\") output_dirpath.mkdir(exist_ok=True)  sns.scatterplot(x=x_data, y=y_data, hue=\"species\", data=iris_data) apc.mpl.style_plot(monospaced_axes=\"all\")  # Save a figure with the resolution for websites. apc.mpl.save_figure(     str(output_dirpath / \"example-figure-web.pdf\"), size=\"full_square\", context=\"web\" )  # Save a figure with the resolution for print. apc.mpl.save_figure(     str(output_dirpath / \"example-figure-print.pdf\"), size=\"full_square\", context=\"print\" ) <pre>'created' timestamp seems very low; regarding as unix timestamp\n</pre> <pre>'created' timestamp seems very low; regarding as unix timestamp\n</pre> <p>You can also generate figures with multiple different file types. For example, you can save a figure as both a PNG and a PDF file.</p> In\u00a0[10]: Copied! <pre>apc.mpl.save_figure(\n    str(output_dirpath / \"example-figure\"),\n    size=\"full_square\",\n    filetypes=[\"pdf\", \"png\"],\n    context=\"web\",\n)\n</pre> apc.mpl.save_figure(     str(output_dirpath / \"example-figure\"),     size=\"full_square\",     filetypes=[\"pdf\", \"png\"],     context=\"web\", ) <pre>Invalid filetype ''. Skipping.\n</pre> <pre>&lt;Figure size 460.8x345.6 with 0 Axes&gt;</pre>"},{"location":"style_usage/#styling-matplotlib-figures","title":"Styling Matplotlib figures\u00b6","text":"<p>Arcadia has a set of visual communication standards for figures. The <code>arcadia_pycolor</code> package provides utilities for automatically styling figures in Python to meet these standards.</p> <p>Note: While equivalent styling utilities exist for Plotly figures, this user guide was written specifically for working with Matplotlib figures. There is currently an open issue for writing an equivalent user guide (or updating this one) for Plotly users.</p>"},{"location":"style_usage/#load-datasets","title":"Load datasets\u00b6","text":"<p>First, load some datasets to use for example plots.</p>"},{"location":"style_usage/#example-plots-without-arcadias-styles","title":"Example plots without Arcadia's styles\u00b6","text":"<p>Using plotting tools like <code>seaborn</code>, you can create plots with their default styles. These styles don't conform to Arcadia's style standards.</p>"},{"location":"style_usage/#applying-arcadias-styles","title":"Applying Arcadia's styles\u00b6","text":"<p>Using <code>arcadia_pycolor</code>'s <code>apc.mpl.setup()</code> function, you can update <code>matplotlib</code>'s default style settings to conform to Arcadia's standards.</p> <p>For example, the above plots don't use the Suisse family of fonts, which are the official fonts specified by Arcadia's style guide.</p> <p>If you have Suisse family fonts installed, <code>apc.mpl.setup()</code> will use them. If you don't have them installed, <code>apc.mpl.setup()</code> will still work for other style settings, but the fonts will be the default ones.</p>"},{"location":"style_usage/#automatic-registration-of-arcadias-colors-and-gradients-in-matplotlib","title":"Automatic registration of Arcadia's colors and gradients in Matplotlib\u00b6","text":"<p>After <code>apc.mpl.setup()</code> is called, all of Arcadia's named colors and colormaps are automatically registered in Matplotlib. This allows you to use them in your plots without having to directly pass the colors or gradients.</p> <p>These registered colors and colormaps are prefixed with <code>\"apc:\"</code>. For example, <code>\"apc:sky\"</code> is a registered color, and <code>\"apc:blues\"</code> is a registered colormap. You can reverse gradients by appending <code>\"_r\"</code> to the colormap name, e.g. <code>\"apc:blues_r\"</code>.</p>"},{"location":"style_usage/#generating-publication-ready-plots","title":"Generating publication-ready plots\u00b6","text":"<p>You can use <code>apc.mpl.style_plot</code> to further style plots to conform to Arcadia's standards. You can call this function after creating a plot to apply the following changes:</p> <ul> <li>Capitalize legend and axis titles.</li> <li>Add a horizontal line between legend title and entries.</li> <li>Converts axis labels to monospaced font (when <code>monospaced_axes=True</code>).</li> <li>Capitalize text, removes tickmarks, and adjusts padding (when <code>categorical_axes=True</code>).</li> <li>Convert colorbar tick labels to monospaced font (when <code>colorbar_exists=True</code>).</li> </ul>"},{"location":"style_usage/#using-default-figure-sizes","title":"Using default figure sizes\u00b6","text":"<p>The <code>apc.mpl.get_figure_dimensions()</code> function allows you to choose from a fixed set of plot sizes. These are compatible with our Adobe Creative Cloud templates.</p> <p>When generated with <code>layout=\"constrained\"</code> and saved using <code>apc.mpl.save_figure()</code>, the resulting PDF images should drag and drop neatly into place with the Illustrator templates.</p> <p>There are three size categories, based on the Creative Cloud templates:</p> <ul> <li><code>\"full\"</code> (1000px wide)</li> <li><code>\"float\"</code> (700px wide)</li> <li><code>\"half\"</code> (500px wide)</li> </ul> <p>Each size category has a few options for aspect ratio:</p> <ul> <li><code>\"wide\"</code>: wider on the horizontal axis, for <code>\"full\"</code> and <code>\"float\"</code> sizes</li> <li><code>\"square\"</code>: equal width and height, for all sizes</li> </ul>"},{"location":"style_usage/#simulating-colored-backgrounds","title":"Simulating colored backgrounds\u00b6","text":"<p>The default Creative Cloud templates use an <code>apc.parchment</code> background color. You can simulate this background color in your plots by modifying <code>matplotlib</code>'s rcParams within a <code>with</code> statement. When saved using <code>apc.mpl.save_figure()</code>, PDF files default to using a transparent background.</p>"},{"location":"style_usage/#saving-figures","title":"Saving figures\u00b6","text":"<p>The <code>arcadia_pycolor</code> package provides a convenience function <code>apc.mpl.save_figure</code> to save figures with the correct resolutions (DPI) for web and print publication.</p>"},{"location":"examples/","title":"Examples","text":"<ul> <li>3D plots</li> <li>Bar plots</li> <li>Heatmaps</li> <li>Plotly subplots</li> <li>Scatter plots</li> <li>Stacked bar plots</li> <li>Stacked line plots</li> </ul>"},{"location":"examples/3d_plots/","title":"3D plots","text":"In\u00a0[1]: Copied! <pre>import plotly.express as px\nimport plotly.graph_objects as go\n\nimport arcadia_pycolor as apc\n\napc.plotly.setup()\n</pre> import plotly.express as px import plotly.graph_objects as go  import arcadia_pycolor as apc  apc.plotly.setup() In\u00a0[2]: Copied! <pre>df = px.data.iris()\n\nfig = px.scatter_3d(\n    df,\n    x=\"sepal_length\",\n    y=\"sepal_width\",\n    z=\"petal_width\",\n    color=\"species\",\n    size=\"sepal_length\",\n    color_discrete_map={\n        \"setosa\": apc.aegean,\n        \"versicolor\": apc.amber,\n        \"virginica\": apc.seaweed,\n    },\n)\n\napc.plotly.style_plot(fig, monospaced_axes=\"all\")\nfig.show()\n</pre> df = px.data.iris()  fig = px.scatter_3d(     df,     x=\"sepal_length\",     y=\"sepal_width\",     z=\"petal_width\",     color=\"species\",     size=\"sepal_length\",     color_discrete_map={         \"setosa\": apc.aegean,         \"versicolor\": apc.amber,         \"virginica\": apc.seaweed,     }, )  apc.plotly.style_plot(fig, monospaced_axes=\"all\") fig.show() In\u00a0[3]: Copied! <pre>fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter3d(\n        x=df[\"sepal_length\"],\n        y=df[\"sepal_width\"],\n        z=df[\"petal_width\"],\n        mode=\"markers\",\n        marker=dict(\n            size=5,\n            color=df[\"species\"].map(\n                {\n                    \"setosa\": apc.aegean,\n                    \"versicolor\": apc.amber,\n                    \"virginica\": apc.seaweed,\n                }\n            ),\n            opacity=0.8,\n        ),\n        text=df[\"species\"],\n        hoverinfo=\"text\",\n    )\n)\n\nfig.update_layout(\n    scene=dict(\n        xaxis_title=\"sepal_length\",\n        yaxis_title=\"sepal_width\",\n        zaxis_title=\"petal_width\",\n    ),\n    showlegend=False,\n)\n\napc.plotly.style_plot(fig, monospaced_axes=\"all\")\nfig.show()\n</pre> fig = go.Figure()  fig.add_trace(     go.Scatter3d(         x=df[\"sepal_length\"],         y=df[\"sepal_width\"],         z=df[\"petal_width\"],         mode=\"markers\",         marker=dict(             size=5,             color=df[\"species\"].map(                 {                     \"setosa\": apc.aegean,                     \"versicolor\": apc.amber,                     \"virginica\": apc.seaweed,                 }             ),             opacity=0.8,         ),         text=df[\"species\"],         hoverinfo=\"text\",     ) )  fig.update_layout(     scene=dict(         xaxis_title=\"sepal_length\",         yaxis_title=\"sepal_width\",         zaxis_title=\"petal_width\",     ),     showlegend=False, )  apc.plotly.style_plot(fig, monospaced_axes=\"all\") fig.show()"},{"location":"examples/3d_plots/#3d-plots","title":"3D plots\u00b6","text":""},{"location":"examples/3d_plots/#1-3d-scatter-plot-with-plotly-express","title":"1. 3D scatter plot with Plotly Express\u00b6","text":""},{"location":"examples/3d_plots/#2-3d-scatter-plot-with-plotly-graph-objects","title":"2. 3D scatter plot with Plotly Graph Objects\u00b6","text":""},{"location":"examples/bar_plots/","title":"Bar plots","text":"In\u00a0[1]: Copied! <pre>import sys\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nsys.path.append(\"..\")\n\nimport arcadia_pycolor as apc\n\napc.mpl.setup()\napc.plotly.setup()\n</pre> import sys  import matplotlib as mpl import matplotlib.pyplot as plt import plotly.express as px import seaborn as sns  sys.path.append(\"..\")  import arcadia_pycolor as apc  apc.mpl.setup() apc.plotly.setup() In\u00a0[2]: Copied! <pre>num_reads = [\n    1_500_000,\n    1_200_000,\n    1_000_000,\n    400_000,\n    1_000_000,\n    1_700_000,\n    1_300_000,\n    600_000,\n    1_200_000,\n    1_500_000,\n    1_600_000,\n    300_000,\n    900_000,\n    1_700_000,\n    800_000,\n]\n\nsample_id = [\n    \"AL 4M\",\n    \"EL 2W\",\n    \"EL 4W\",\n    \"EL 4W WGA\",\n    \"EL 12W\",\n    \"OM 2W\",\n    \"OM 4W\",\n    \"OM 4W WGA\",\n    \"OM 8W\",\n    \"WH 1M\",\n    \"WH 2M\",\n    \"WH 2M WGA\",\n    \"WH 4M\",\n    \"WH 2M Hous\",\n    \"WI 3W\",\n]\n\nerror = [\n    100000,\n    80000,\n    70000,\n    30000,\n    70000,\n    120000,\n    90000,\n    40000,\n    80000,\n    100000,\n    110000,\n    20000,\n    60000,\n    120000,\n    50000,\n]\n</pre> num_reads = [     1_500_000,     1_200_000,     1_000_000,     400_000,     1_000_000,     1_700_000,     1_300_000,     600_000,     1_200_000,     1_500_000,     1_600_000,     300_000,     900_000,     1_700_000,     800_000, ]  sample_id = [     \"AL 4M\",     \"EL 2W\",     \"EL 4W\",     \"EL 4W WGA\",     \"EL 12W\",     \"OM 2W\",     \"OM 4W\",     \"OM 4W WGA\",     \"OM 8W\",     \"WH 1M\",     \"WH 2M\",     \"WH 2M WGA\",     \"WH 4M\",     \"WH 2M Hous\",     \"WI 3W\", ]  error = [     100000,     80000,     70000,     30000,     70000,     120000,     90000,     40000,     80000,     100000,     110000,     20000,     60000,     120000,     50000, ] In\u00a0[3]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\")\n\nsample_id_formatted = [i.replace(\" \", \"\\n\") for i in sample_id]\nplt.bar(sample_id_formatted, num_reads, color=apc.aster)\n\napc.mpl.style_plot(ax, monospaced_axes=\"y\")\napc.mpl.set_xaxis_categorical()\n\n# Use this to format the y-axis with commas.\nax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore\n\n# Remove this if you don't want error bars.\nplt.errorbar(sample_id_formatted, num_reads, yerr=error, fmt=\"none\", color=apc.crow)\n\nplt.ylabel(\"Number of reads\")\nplt.xlabel(\"Sample\")\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\")  sample_id_formatted = [i.replace(\" \", \"\\n\") for i in sample_id] plt.bar(sample_id_formatted, num_reads, color=apc.aster)  apc.mpl.style_plot(ax, monospaced_axes=\"y\") apc.mpl.set_xaxis_categorical()  # Use this to format the y-axis with commas. ax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore  # Remove this if you don't want error bars. plt.errorbar(sample_id_formatted, num_reads, yerr=error, fmt=\"none\", color=apc.crow)  plt.ylabel(\"Number of reads\") plt.xlabel(\"Sample\") plt.show() In\u00a0[4]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"half_square\"), layout=\"constrained\")\nplt.barh(sample_id, num_reads, color=apc.aster)\n\napc.mpl.style_plot(ax, monospaced_axes=\"x\")\napc.mpl.set_yaxis_categorical()\n\nax.get_xaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore\nplt.xticks(rotation=30, ha=\"right\")\n\n# Remove this if you don't want error bars.\nplt.errorbar(num_reads, sample_id, xerr=error, fmt=\"none\", color=apc.crow)\n\nplt.xlabel(\"Number of reads\")\nplt.ylabel(\"Sample\")\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"half_square\"), layout=\"constrained\") plt.barh(sample_id, num_reads, color=apc.aster)  apc.mpl.style_plot(ax, monospaced_axes=\"x\") apc.mpl.set_yaxis_categorical()  ax.get_xaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore plt.xticks(rotation=30, ha=\"right\")  # Remove this if you don't want error bars. plt.errorbar(num_reads, sample_id, xerr=error, fmt=\"none\", color=apc.crow)  plt.xlabel(\"Number of reads\") plt.ylabel(\"Sample\") plt.show() In\u00a0[5]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\")\nsns.barplot(\n    x=sample_id_formatted,\n    y=num_reads,\n    color=apc.aster,\n    saturation=1,  # Seaborn by default desaturates the colors. This prevents that.\n)\n\napc.mpl.style_plot(ax, monospaced_axes=\"y\")\napc.mpl.set_xaxis_categorical()\n\nax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore\n\nplt.ylabel(\"Number of reads\")\nplt.xlabel(\"Sample\")\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\") sns.barplot(     x=sample_id_formatted,     y=num_reads,     color=apc.aster,     saturation=1,  # Seaborn by default desaturates the colors. This prevents that. )  apc.mpl.style_plot(ax, monospaced_axes=\"y\") apc.mpl.set_xaxis_categorical()  ax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore  plt.ylabel(\"Number of reads\") plt.xlabel(\"Sample\") plt.show() In\u00a0[6]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"half_square\"), layout=\"constrained\")\nsns.barplot(\n    y=sample_id,\n    x=num_reads,\n    color=apc.aster,\n    saturation=1,  # Seaborn by default desaturates the colors. This prevents that.\n)\n\napc.mpl.style_plot(ax, monospaced_axes=\"x\")\napc.mpl.set_yaxis_categorical()\n\nax.get_xaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore\n\nplt.xticks(rotation=30, ha=\"right\")\n\nplt.xlabel(\"Number of reads\")\nplt.ylabel(\"Sample\")\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"half_square\"), layout=\"constrained\") sns.barplot(     y=sample_id,     x=num_reads,     color=apc.aster,     saturation=1,  # Seaborn by default desaturates the colors. This prevents that. )  apc.mpl.style_plot(ax, monospaced_axes=\"x\") apc.mpl.set_yaxis_categorical()  ax.get_xaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore  plt.xticks(rotation=30, ha=\"right\")  plt.xlabel(\"Number of reads\") plt.ylabel(\"Sample\") plt.show() In\u00a0[7]: Copied! <pre>fig = px.bar(x=sample_id, y=num_reads, error_y=error)\nfig.update_layout(\n    xaxis_title=\"Sample\",\n    yaxis_title=\"Number of reads\",\n    showlegend=False,\n)\nfig.update_traces(\n    marker_color=apc.aster,\n    error_y_color=apc.crow,\n    error_y_thickness=1.5,\n    error_y_width=0,\n)\n\napc.plotly.style_plot(fig, categorical_axes=\"x\", monospaced_axes=\"y\")\napc.plotly.add_commas_to_axis_tick_labels(fig)\napc.plotly.set_figure_dimensions(fig, \"full_wide\")\n\nfig.show()\n</pre> fig = px.bar(x=sample_id, y=num_reads, error_y=error) fig.update_layout(     xaxis_title=\"Sample\",     yaxis_title=\"Number of reads\",     showlegend=False, ) fig.update_traces(     marker_color=apc.aster,     error_y_color=apc.crow,     error_y_thickness=1.5,     error_y_width=0, )  apc.plotly.style_plot(fig, categorical_axes=\"x\", monospaced_axes=\"y\") apc.plotly.add_commas_to_axis_tick_labels(fig) apc.plotly.set_figure_dimensions(fig, \"full_wide\")  fig.show() In\u00a0[8]: Copied! <pre>fig = px.bar(x=num_reads, y=sample_id, error_x=error)\nfig.update_layout(\n    xaxis_title=\"Number of reads\",\n    yaxis_title=\"Sample\",\n    showlegend=False,\n)\nfig.update_traces(\n    marker_color=apc.aster,\n    error_x_color=apc.crow,\n    error_x_thickness=1.5,\n    error_x_width=0,\n)\n\napc.plotly.style_plot(fig, categorical_axes=\"y\", monospaced_axes=\"x\")\napc.plotly.add_commas_to_axis_tick_labels(fig)\napc.plotly.set_figure_dimensions(fig, \"half_square\")\n\nfig.show()\n</pre> fig = px.bar(x=num_reads, y=sample_id, error_x=error) fig.update_layout(     xaxis_title=\"Number of reads\",     yaxis_title=\"Sample\",     showlegend=False, ) fig.update_traces(     marker_color=apc.aster,     error_x_color=apc.crow,     error_x_thickness=1.5,     error_x_width=0, )  apc.plotly.style_plot(fig, categorical_axes=\"y\", monospaced_axes=\"x\") apc.plotly.add_commas_to_axis_tick_labels(fig) apc.plotly.set_figure_dimensions(fig, \"half_square\")  fig.show() In\u00a0[9]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\")\n\ncolor_labels = [idx.split(\" \")[0] for idx in sample_id]\ncolor_dict = dict(zip(set(color_labels), [apc.aster, apc.aegean, apc.amber, apc.seaweed, apc.rose]))\n\ncolors = [dict(color_dict)[i] for i in color_labels]\n\nsample_id_formatted = [i.replace(\" \", \"\\n\") for i in sample_id]\nplt.bar(sample_id_formatted, num_reads, color=colors)\n\napc.mpl.style_plot(ax, monospaced_axes=\"y\")\napc.mpl.set_xaxis_categorical()\n\nax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore\n\nplt.ylabel(\"Number of reads\")\nplt.xlabel(\"Sample\")\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\")  color_labels = [idx.split(\" \")[0] for idx in sample_id] color_dict = dict(zip(set(color_labels), [apc.aster, apc.aegean, apc.amber, apc.seaweed, apc.rose]))  colors = [dict(color_dict)[i] for i in color_labels]  sample_id_formatted = [i.replace(\" \", \"\\n\") for i in sample_id] plt.bar(sample_id_formatted, num_reads, color=colors)  apc.mpl.style_plot(ax, monospaced_axes=\"y\") apc.mpl.set_xaxis_categorical()  ax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore  plt.ylabel(\"Number of reads\") plt.xlabel(\"Sample\") plt.show() In\u00a0[10]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\")\n\ncolor_labels = [idx.split(\" \")[0] for idx in sample_id]\ncolor_dict = dict(zip(set(color_labels), [apc.aster, apc.aegean, apc.amber, apc.seaweed, apc.rose]))\n\nsns.barplot(\n    x=sample_id_formatted,\n    y=num_reads,\n    hue=color_labels,\n    palette=color_dict,\n    saturation=1,  # Seaborn by default desaturates the colors. This prevents that.\n)\n\napc.mpl.style_plot(ax, monospaced_axes=\"y\")\napc.mpl.set_xaxis_categorical()\n\nax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore\n\nplt.ylabel(\"Number of reads\")\nplt.xlabel(\"Sample\")\n\nlegend = ax.get_legend()\nlegend.set_title(\"ID\")\n\nlegend.set_bbox_to_anchor((1.06, 1))\n\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"full_wide\"), layout=\"constrained\")  color_labels = [idx.split(\" \")[0] for idx in sample_id] color_dict = dict(zip(set(color_labels), [apc.aster, apc.aegean, apc.amber, apc.seaweed, apc.rose]))  sns.barplot(     x=sample_id_formatted,     y=num_reads,     hue=color_labels,     palette=color_dict,     saturation=1,  # Seaborn by default desaturates the colors. This prevents that. )  apc.mpl.style_plot(ax, monospaced_axes=\"y\") apc.mpl.set_xaxis_categorical()  ax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: format(int(x), \",\")))  # type: ignore  plt.ylabel(\"Number of reads\") plt.xlabel(\"Sample\")  legend = ax.get_legend() legend.set_title(\"ID\")  legend.set_bbox_to_anchor((1.06, 1))  plt.show() In\u00a0[11]: Copied! <pre>color_labels = [idx.split(\" \")[0] for idx in sample_id]\ncolor_dict = {\n    label: color\n    for label, color in zip(\n        set(color_labels), [apc.aster, apc.aegean, apc.amber, apc.seaweed, apc.rose]\n    )\n}\n\nfig = px.bar(\n    x=sample_id,\n    y=num_reads,\n    color=color_labels,\n    color_discrete_map=color_dict,\n    title=None,\n)\n\nfig.update_layout(\n    xaxis_title=\"Sample\",\n    yaxis_title=\"Number of reads\",\n    legend=dict(title=\"ID\"),\n)\n\napc.plotly.style_plot(fig, categorical_axes=\"x\", monospaced_axes=\"y\")\napc.plotly.style_legend(fig)\napc.plotly.add_commas_to_axis_tick_labels(fig)\napc.plotly.set_figure_dimensions(fig, \"full_wide\")\n\nfig.show()\n</pre> color_labels = [idx.split(\" \")[0] for idx in sample_id] color_dict = {     label: color     for label, color in zip(         set(color_labels), [apc.aster, apc.aegean, apc.amber, apc.seaweed, apc.rose]     ) }  fig = px.bar(     x=sample_id,     y=num_reads,     color=color_labels,     color_discrete_map=color_dict,     title=None, )  fig.update_layout(     xaxis_title=\"Sample\",     yaxis_title=\"Number of reads\",     legend=dict(title=\"ID\"), )  apc.plotly.style_plot(fig, categorical_axes=\"x\", monospaced_axes=\"y\") apc.plotly.style_legend(fig) apc.plotly.add_commas_to_axis_tick_labels(fig) apc.plotly.set_figure_dimensions(fig, \"full_wide\")  fig.show()"},{"location":"examples/bar_plots/#bar-plots","title":"Bar plots\u00b6","text":""},{"location":"examples/bar_plots/#1-vertical-bar-chart-using-matplotlib","title":"1. Vertical bar chart using Matplotlib\u00b6","text":""},{"location":"examples/bar_plots/#2-horizontal-bar-chart-using-matplotlib","title":"2. Horizontal bar chart using Matplotlib\u00b6","text":""},{"location":"examples/bar_plots/#3-vertical-bar-chart-using-seaborn","title":"3. Vertical bar chart using Seaborn\u00b6","text":""},{"location":"examples/bar_plots/#4-horizontal-bar-chart-using-seaborn","title":"4. Horizontal bar chart using Seaborn\u00b6","text":""},{"location":"examples/bar_plots/#5-vertical-bar-chart-using-plotly","title":"5. Vertical bar chart using Plotly\u00b6","text":""},{"location":"examples/bar_plots/#6-horizontal-bar-chart-using-plotly","title":"6. Horizontal bar chart using Plotly\u00b6","text":""},{"location":"examples/bar_plots/#7-bar-chart-with-colored-categories-using-matplotlib","title":"7. Bar chart with colored categories using Matplotlib\u00b6","text":""},{"location":"examples/bar_plots/#8-bar-chart-with-colored-categories-using-seaborn","title":"8. Bar chart with colored categories using Seaborn\u00b6","text":""},{"location":"examples/bar_plots/#9-bar-chart-with-colored-categories-using-plotly","title":"9. Bar chart with colored categories using Plotly\u00b6","text":""},{"location":"examples/heatmaps/","title":"Heatmaps","text":"In\u00a0[1]: Copied! <pre>import sys\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\nimport seaborn as sns\nfrom plotly.subplots import make_subplots\n\nsys.path.append(\"..\")\n\nimport arcadia_pycolor as apc\n\napc.mpl.setup()\napc.plotly.setup()\n</pre> import sys  import matplotlib.pyplot as plt import numpy as np import plotly.graph_objects as go import seaborn as sns from plotly.subplots import make_subplots  sys.path.append(\"..\")  import arcadia_pycolor as apc  apc.mpl.setup() apc.plotly.setup() In\u00a0[2]: Copied! <pre>random_data = np.random.rand(8, 8)\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 5), layout=\"constrained\")\nsns.heatmap(\n    random_data,\n    ax=axs[0],  # type: ignore\n    square=True,\n    cmap=\"apc:magma\",\n    cbar_kws={\"label\": \"Intensity\"},\n    annot=True,\n    annot_kws={\"fontsize\": 12},\n)\nsns.heatmap(\n    random_data - 0.5,\n    ax=axs[1],  # type: ignore\n    square=True,\n    cmap=\"apc:purples\",\n    cbar_kws={\"label\": \"Intensity\"},\n)\n\nfor ax in axs:  # type: ignore\n    apc.mpl.style_plot(\n        ax,\n        monospaced_axes=\"all\",\n        colorbar_exists=True,\n    )\n    ax.set_xlabel(\"Category 1\")\n    ax.set_ylabel(\"Category 2\")\n\nplt.show()\n</pre> random_data = np.random.rand(8, 8)  fig, axs = plt.subplots(1, 2, figsize=(13, 5), layout=\"constrained\") sns.heatmap(     random_data,     ax=axs[0],  # type: ignore     square=True,     cmap=\"apc:magma\",     cbar_kws={\"label\": \"Intensity\"},     annot=True,     annot_kws={\"fontsize\": 12}, ) sns.heatmap(     random_data - 0.5,     ax=axs[1],  # type: ignore     square=True,     cmap=\"apc:purples\",     cbar_kws={\"label\": \"Intensity\"}, )  for ax in axs:  # type: ignore     apc.mpl.style_plot(         ax,         monospaced_axes=\"all\",         colorbar_exists=True,     )     ax.set_xlabel(\"Category 1\")     ax.set_ylabel(\"Category 2\")  plt.show() In\u00a0[3]: Copied! <pre>random_data = np.round(np.random.rand(8, 8), 2)\n\nmagma_colorscale = apc.gradients.magma.to_plotly_colorscale()\npurples_colorscale = apc.gradients.purples.to_plotly_colorscale()\n\ncolorbar_styles = apc.plotly.get_arcadia_styles()[\"coloraxis\"][\"colorbar\"]\n\nfig = make_subplots(1, 2, horizontal_spacing=0.25)\nfig.add_trace(\n    go.Heatmap(\n        z=random_data,\n        colorscale=magma_colorscale,\n        colorbar=dict(\n            x=0.4,\n            **colorbar_styles,\n            title_text=\"Intensity\",\n        ),\n        showscale=True,\n        text=random_data,\n        texttemplate=\"%{text}\",\n    ),\n    1,\n    1,\n)\nfig.add_trace(\n    go.Heatmap(\n        z=random_data - 0.5,\n        colorscale=purples_colorscale,\n        colorbar=dict(\n            **colorbar_styles,\n            title_text=\"Intensity\",\n        ),\n    ),\n    1,\n    2,\n)\n\nfor i in [1, 2]:\n    fig.update_xaxes(title_text=\"Category 1\", row=1, col=i)\n    fig.update_yaxes(title_text=\"Category 2\", row=1, col=i)\n    apc.plotly.hide_axis_lines(fig, row=1, col=i)\n    apc.plotly.set_ticklabel_monospaced(fig, row=1, col=i)\n\napc.plotly.set_figure_dimensions(fig, \"full_wide\")\n\nfig.show()\n</pre> random_data = np.round(np.random.rand(8, 8), 2)  magma_colorscale = apc.gradients.magma.to_plotly_colorscale() purples_colorscale = apc.gradients.purples.to_plotly_colorscale()  colorbar_styles = apc.plotly.get_arcadia_styles()[\"coloraxis\"][\"colorbar\"]  fig = make_subplots(1, 2, horizontal_spacing=0.25) fig.add_trace(     go.Heatmap(         z=random_data,         colorscale=magma_colorscale,         colorbar=dict(             x=0.4,             **colorbar_styles,             title_text=\"Intensity\",         ),         showscale=True,         text=random_data,         texttemplate=\"%{text}\",     ),     1,     1, ) fig.add_trace(     go.Heatmap(         z=random_data - 0.5,         colorscale=purples_colorscale,         colorbar=dict(             **colorbar_styles,             title_text=\"Intensity\",         ),     ),     1,     2, )  for i in [1, 2]:     fig.update_xaxes(title_text=\"Category 1\", row=1, col=i)     fig.update_yaxes(title_text=\"Category 2\", row=1, col=i)     apc.plotly.hide_axis_lines(fig, row=1, col=i)     apc.plotly.set_ticklabel_monospaced(fig, row=1, col=i)  apc.plotly.set_figure_dimensions(fig, \"full_wide\")  fig.show()"},{"location":"examples/heatmaps/#heatmaps","title":"Heatmaps\u00b6","text":""},{"location":"examples/heatmaps/#1-heatmaps-with-seaborn","title":"1. Heatmaps with Seaborn\u00b6","text":""},{"location":"examples/heatmaps/#2-heatmaps-with-plotly","title":"2. Heatmaps with Plotly\u00b6","text":""},{"location":"examples/plotly_subplots/","title":"Plotly subplots","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport arcadia_pycolor as apc\n\napc.plotly.setup()\n\nx_data = np.random.randint(1, 100, 100)\ny_data = np.random.randint(1, 100, 100)\nz_data = np.random.randint(1, 100, 100)\n\ncolorbar_styles = apc.plotly.get_arcadia_styles()[\"coloraxis\"][\"colorbar\"]\n\nbar_trace = go.Bar(x=x_data, y=y_data, marker_color=apc.colors.tumbleweed)\n\nheatmap_trace = go.Heatmap(\n    z=z_data.reshape(10, 10),\n    colorscale=apc.gradients.magma.to_plotly_colorscale(),\n    colorbar=dict(**colorbar_styles),\n)\n\nscatter_trace_2d = go.Scatter(\n    x=x_data,\n    y=y_data,\n    marker=dict(\n        color=z_data,\n        colorscale=apc.gradients.magma.to_plotly_colorscale(),\n    ),\n    mode=\"markers\",\n)\n\nscatter_trace_3d = go.Scatter3d(\n    x=x_data,\n    y=y_data,\n    z=z_data,\n    mode=\"markers\",\n    marker=dict(\n        size=3,\n        color=z_data,\n        colorscale=apc.gradients.magma.to_plotly_colorscale(),\n    ),\n)\n</pre> import numpy as np import plotly.graph_objects as go from plotly.subplots import make_subplots  import arcadia_pycolor as apc  apc.plotly.setup()  x_data = np.random.randint(1, 100, 100) y_data = np.random.randint(1, 100, 100) z_data = np.random.randint(1, 100, 100)  colorbar_styles = apc.plotly.get_arcadia_styles()[\"coloraxis\"][\"colorbar\"]  bar_trace = go.Bar(x=x_data, y=y_data, marker_color=apc.colors.tumbleweed)  heatmap_trace = go.Heatmap(     z=z_data.reshape(10, 10),     colorscale=apc.gradients.magma.to_plotly_colorscale(),     colorbar=dict(**colorbar_styles), )  scatter_trace_2d = go.Scatter(     x=x_data,     y=y_data,     marker=dict(         color=z_data,         colorscale=apc.gradients.magma.to_plotly_colorscale(),     ),     mode=\"markers\", )  scatter_trace_3d = go.Scatter3d(     x=x_data,     y=y_data,     z=z_data,     mode=\"markers\",     marker=dict(         size=3,         color=z_data,         colorscale=apc.gradients.magma.to_plotly_colorscale(),     ), ) In\u00a0[2]: Copied! <pre>fig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]])\n\nfig.add_trace(bar_trace, row=1, col=1)\nfig.add_trace(heatmap_trace, row=1, col=2)\n\napc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=1)\napc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=2)\n\napc.plotly.hide_axis_lines(fig, row=1, col=2)\nfig.update_layout(height=350)\nfig.show()\n</pre> fig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]])  fig.add_trace(bar_trace, row=1, col=1) fig.add_trace(heatmap_trace, row=1, col=2)  apc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=1) apc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=2)  apc.plotly.hide_axis_lines(fig, row=1, col=2) fig.update_layout(height=350) fig.show() In\u00a0[3]: Copied! <pre>fig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"scene\"}, {\"type\": \"scene\"}]])\n\nfig.add_trace(scatter_trace_3d, row=1, col=1)\nfig.add_trace(scatter_trace_3d, row=1, col=2)\n\napc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=1)\napc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=2)\n\napc.plotly.hide_axis_lines(fig, row=1, col=2)\nfig.update_layout(height=350, showlegend=False)\nfig.show()\n</pre> fig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"scene\"}, {\"type\": \"scene\"}]])  fig.add_trace(scatter_trace_3d, row=1, col=1) fig.add_trace(scatter_trace_3d, row=1, col=2)  apc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=1) apc.plotly.style_plot(fig, monospaced_axes=\"all\", row=1, col=2)  apc.plotly.hide_axis_lines(fig, row=1, col=2) fig.update_layout(height=350, showlegend=False) fig.show() In\u00a0[4]: Copied! <pre>fig = make_subplots(\n    rows=2,\n    cols=2,\n    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}], [{\"type\": \"xy\"}, {\"type\": \"scene\"}]],\n)\n\nfig.add_trace(bar_trace, row=1, col=1)\nfig.add_trace(heatmap_trace, row=1, col=2)\nfig.add_trace(scatter_trace_2d, row=2, col=1)\nfig.add_trace(scatter_trace_3d, row=2, col=2)\n\nfor i in range(1, 3):\n    for j in range(1, 3):\n        apc.plotly.style_plot(fig, monospaced_axes=\"all\", row=i, col=j)\n\napc.plotly.hide_axis_lines(fig, row=1, col=2)\n\nfig.update_layout(height=700, showlegend=False)\nfig.show()\n</pre> fig = make_subplots(     rows=2,     cols=2,     specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}], [{\"type\": \"xy\"}, {\"type\": \"scene\"}]], )  fig.add_trace(bar_trace, row=1, col=1) fig.add_trace(heatmap_trace, row=1, col=2) fig.add_trace(scatter_trace_2d, row=2, col=1) fig.add_trace(scatter_trace_3d, row=2, col=2)  for i in range(1, 3):     for j in range(1, 3):         apc.plotly.style_plot(fig, monospaced_axes=\"all\", row=i, col=j)  apc.plotly.hide_axis_lines(fig, row=1, col=2)  fig.update_layout(height=700, showlegend=False) fig.show()"},{"location":"examples/plotly_subplots/#plotly-subplots","title":"Plotly subplots\u00b6","text":""},{"location":"examples/plotly_subplots/#1-figure-with-2d-subplots","title":"1. Figure with 2D subplots\u00b6","text":""},{"location":"examples/plotly_subplots/#2-figure-with-3d-subplots","title":"2. Figure with 3D subplots\u00b6","text":""},{"location":"examples/plotly_subplots/#3-figure-with-2d-and-3d-subplots","title":"3. Figure with 2D and 3D subplots\u00b6","text":""},{"location":"examples/scatter_plots/","title":"Scatter plots","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport arcadia_pycolor as apc\n\napc.mpl.setup()\napc.plotly.setup()\n\ndf = px.data.iris()\n</pre> import matplotlib.pyplot as plt import plotly.express as px  import arcadia_pycolor as apc  apc.mpl.setup() apc.plotly.setup()  df = px.data.iris() In\u00a0[2]: Copied! <pre>fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\")\nscatter = ax.scatter(\n    x=df[\"sepal_width\"],\n    y=df[\"sepal_length\"],\n    c=df[\"petal_length\"],\n    cmap=\"apc:magma\",\n)\nax.set_xlabel(\"Sepal width\")\nax.set_ylabel(\"Sepal length\")\n\ncb = fig.colorbar(scatter, ax=ax)\ncb.set_label(\"Petal length\")\ncb.outline.set_visible(False)  # type: ignore\n\napc.mpl.style_plot(monospaced_axes=\"all\", colorbar_exists=True)\n\nplt.show()\n</pre> fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"float_wide\"), layout=\"constrained\") scatter = ax.scatter(     x=df[\"sepal_width\"],     y=df[\"sepal_length\"],     c=df[\"petal_length\"],     cmap=\"apc:magma\", ) ax.set_xlabel(\"Sepal width\") ax.set_ylabel(\"Sepal length\")  cb = fig.colorbar(scatter, ax=ax) cb.set_label(\"Petal length\") cb.outline.set_visible(False)  # type: ignore  apc.mpl.style_plot(monospaced_axes=\"all\", colorbar_exists=True)  plt.show() In\u00a0[3]: Copied! <pre>fig = px.scatter(\n    df,\n    x=\"sepal_width\",\n    y=\"sepal_length\",\n    color=\"petal_length\",\n    color_continuous_scale=apc.gradients.magma.to_plotly_colorscale(),\n)\n\napc.plotly.style_plot(fig, monospaced_axes=\"all\")\napc.plotly.set_figure_dimensions(fig, \"float_wide\")\n\nfig.show()\n</pre> fig = px.scatter(     df,     x=\"sepal_width\",     y=\"sepal_length\",     color=\"petal_length\",     color_continuous_scale=apc.gradients.magma.to_plotly_colorscale(), )  apc.plotly.style_plot(fig, monospaced_axes=\"all\") apc.plotly.set_figure_dimensions(fig, \"float_wide\")  fig.show()"},{"location":"examples/scatter_plots/#scatter-plots","title":"Scatter plots\u00b6","text":""},{"location":"examples/scatter_plots/#1-scatter-plot-with-matplotlib","title":"1. Scatter plot with Matplotlib\u00b6","text":""},{"location":"examples/scatter_plots/#2-scatter-plot-with-plotly","title":"2. Scatter plot with Plotly\u00b6","text":""},{"location":"examples/stacked_bar_plots/","title":"Stacked bar plots","text":"In\u00a0[1]: Copied! <pre>import sys\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\n\nsys.path.append(\"..\")\n\nimport arcadia_pycolor as apc\n\napc.mpl.setup()\napc.plotly.setup()\n</pre> import sys  import matplotlib.pyplot as plt import numpy as np import pandas as pd import plotly.express as px  sys.path.append(\"..\")  import arcadia_pycolor as apc  apc.mpl.setup() apc.plotly.setup() In\u00a0[2]: Copied! <pre>categories = [\"Water\", \"Salt\", \"Drug A\", \"Drug B\", \"Drug C\"]\nsubcategories = [\"dead\", \"malformed\", \"alive\"]\ndata = np.array(\n    [\n        [5, 10, 15],\n        [7, 14, 21],\n        [10, 20, 30],\n        [3, 6, 20],\n        [23, 4, 7],\n    ]\n)\n\nfig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"half_square\"), layout=\"constrained\")\n\n# Initialize the bottom array to 0\nbottom = np.zeros(len(categories))\n\ncolors = [apc.denim, apc.canary, apc.seaweed]\n\n# Loop through each subcategory and plot\nfor i in range(len(subcategories)):\n    ax.bar(categories, data[:, i], bottom=bottom, label=subcategories[i], color=colors[i])\n    bottom += data[:, i]\n\nax.set_xlabel(\"Condition\")\nax.set_ylabel(\"Number of embryos\")\n\nlegend = ax.legend()\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(reversed(handles), reversed(labels))\nax.get_legend().set_title(\"Viability\")  # type: ignore\n\napc.mpl.style_plot(ax, categorical_axes=\"x\", monospaced_axes=\"y\")\n\nplt.show()\n</pre> categories = [\"Water\", \"Salt\", \"Drug A\", \"Drug B\", \"Drug C\"] subcategories = [\"dead\", \"malformed\", \"alive\"] data = np.array(     [         [5, 10, 15],         [7, 14, 21],         [10, 20, 30],         [3, 6, 20],         [23, 4, 7],     ] )  fig, ax = plt.subplots(figsize=apc.mpl.get_figure_dimensions(\"half_square\"), layout=\"constrained\")  # Initialize the bottom array to 0 bottom = np.zeros(len(categories))  colors = [apc.denim, apc.canary, apc.seaweed]  # Loop through each subcategory and plot for i in range(len(subcategories)):     ax.bar(categories, data[:, i], bottom=bottom, label=subcategories[i], color=colors[i])     bottom += data[:, i]  ax.set_xlabel(\"Condition\") ax.set_ylabel(\"Number of embryos\")  legend = ax.legend() handles, labels = ax.get_legend_handles_labels() ax.legend(reversed(handles), reversed(labels)) ax.get_legend().set_title(\"Viability\")  # type: ignore  apc.mpl.style_plot(ax, categorical_axes=\"x\", monospaced_axes=\"y\")  plt.show() In\u00a0[3]: Copied! <pre>df = pd.DataFrame(data, columns=subcategories)\ndf[\"Categories\"] = categories\n\nfig = px.bar(\n    df,\n    x=\"Categories\",\n    y=subcategories,\n    labels={\"Categories\": \"Condition\", \"value\": \"Number of embryos\"},\n    color_discrete_map={\n        \"alive\": apc.seaweed,\n        \"malformed\": apc.canary,\n        \"dead\": apc.denim,\n    },\n)\n\nfig.update_layout(legend_title_text=\"viability\")\n\napc.plotly.style_plot(fig, categorical_axes=\"x\", monospaced_axes=\"y\")\napc.plotly.style_legend(fig)\napc.plotly.add_commas_to_axis_tick_labels(fig)\napc.plotly.set_figure_dimensions(fig, \"half_square\")\n\nfig.show()\n</pre> df = pd.DataFrame(data, columns=subcategories) df[\"Categories\"] = categories  fig = px.bar(     df,     x=\"Categories\",     y=subcategories,     labels={\"Categories\": \"Condition\", \"value\": \"Number of embryos\"},     color_discrete_map={         \"alive\": apc.seaweed,         \"malformed\": apc.canary,         \"dead\": apc.denim,     }, )  fig.update_layout(legend_title_text=\"viability\")  apc.plotly.style_plot(fig, categorical_axes=\"x\", monospaced_axes=\"y\") apc.plotly.style_legend(fig) apc.plotly.add_commas_to_axis_tick_labels(fig) apc.plotly.set_figure_dimensions(fig, \"half_square\")  fig.show()"},{"location":"examples/stacked_bar_plots/#stacked-bar-plots","title":"Stacked bar plots\u00b6","text":""},{"location":"examples/stacked_bar_plots/#1-stacked-bar-plot-with-matplotlib","title":"1. Stacked bar plot with Matplotlib\u00b6","text":""},{"location":"examples/stacked_bar_plots/#2-stacked-bar-plot-with-plotly","title":"2. Stacked bar plot with Plotly\u00b6","text":""},{"location":"examples/stacked_line_plots/","title":"Stacked line plots","text":"In\u00a0[1]: Copied! <pre>import sys\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\n\nsys.path.append(\"..\")\n\nimport arcadia_pycolor as apc\n\napc.mpl.setup()\napc.plotly.setup()\n</pre> import sys  import matplotlib.pyplot as plt import numpy as np import plotly.graph_objects as go  sys.path.append(\"..\")  import arcadia_pycolor as apc  apc.mpl.setup() apc.plotly.setup() In\u00a0[2]: Copied! <pre>lines = np.random.rand(10, 20)\n</pre> lines = np.random.rand(10, 20) In\u00a0[3]: Copied! <pre>fig, axes = plt.subplots(\n    nrows=len(lines),\n    figsize=(5, 8),\n)\n\ncolors = [apc.aegean, apc.gray, apc.dragon]\n\ncmap = apc.Gradient(\n    name=\"\",\n    colors=colors,\n).to_mpl_cmap()\n\nfor i, line in enumerate(lines):\n    ax = axes[i]  # type: ignore\n    color = cmap(i / len(lines))\n    ax.plot(line, color=color)\n    apc.mpl.style_plot(axes=ax, monospaced_axes=\"all\")\n    ax.set_yticks([])\n\n    if i != len(lines) - 1:\n        ax.spines[\"bottom\"].set_visible(False)\n        ax.set_xticks([])\n    else:\n        ax.set_xlabel(\"Time (s)\")\n\nfig.supylabel(\"Brightness\")\n\nfig.subplots_adjust(hspace=0)\n</pre> fig, axes = plt.subplots(     nrows=len(lines),     figsize=(5, 8), )  colors = [apc.aegean, apc.gray, apc.dragon]  cmap = apc.Gradient(     name=\"\",     colors=colors, ).to_mpl_cmap()  for i, line in enumerate(lines):     ax = axes[i]  # type: ignore     color = cmap(i / len(lines))     ax.plot(line, color=color)     apc.mpl.style_plot(axes=ax, monospaced_axes=\"all\")     ax.set_yticks([])      if i != len(lines) - 1:         ax.spines[\"bottom\"].set_visible(False)         ax.set_xticks([])     else:         ax.set_xlabel(\"Time (s)\")  fig.supylabel(\"Brightness\")  fig.subplots_adjust(hspace=0) In\u00a0[4]: Copied! <pre>gradient = apc.Gradient(\n    name=\"aegean_to_dragon\",\n    colors=colors,\n).to_plotly_colorscale()\n\nfig = go.Figure()\n\nfor i, line in enumerate(lines):\n    fig.add_trace(\n        go.Scatter(\n            x=list(range(len(line))),\n            y=line + (i * 1.25),\n            mode=\"lines\",\n            name=f\"line_{i}\",\n            line=dict(color=gradient[i * 25][1]),\n        )\n    )\n\nfig.update_layout(\n    xaxis=dict(title=\"Time (s)\"),\n    yaxis=dict(title=\"Brightness\"),\n    showlegend=False,\n    width=360,\n    height=520,\n    margin=dict(l=50, b=70, r=30, t=30),\n)\n\napc.plotly.set_xticklabel_monospaced(fig)\napc.plotly.hide_yaxis_ticks(fig)\n\nfig.show()\n</pre> gradient = apc.Gradient(     name=\"aegean_to_dragon\",     colors=colors, ).to_plotly_colorscale()  fig = go.Figure()  for i, line in enumerate(lines):     fig.add_trace(         go.Scatter(             x=list(range(len(line))),             y=line + (i * 1.25),             mode=\"lines\",             name=f\"line_{i}\",             line=dict(color=gradient[i * 25][1]),         )     )  fig.update_layout(     xaxis=dict(title=\"Time (s)\"),     yaxis=dict(title=\"Brightness\"),     showlegend=False,     width=360,     height=520,     margin=dict(l=50, b=70, r=30, t=30), )  apc.plotly.set_xticklabel_monospaced(fig) apc.plotly.hide_yaxis_ticks(fig)  fig.show()"},{"location":"examples/stacked_line_plots/#stacked-line-plots","title":"Stacked line plots\u00b6","text":""},{"location":"examples/stacked_line_plots/#1-stacked-line-plot-with-matplotlib","title":"1. Stacked line plot with Matplotlib\u00b6","text":""},{"location":"examples/stacked_line_plots/#2-stacked-line-plot-with-plotly","title":"2. Stacked line plot with Plotly\u00b6","text":""}]}